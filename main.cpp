// main.cpp - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Player class ‡πÅ‡∏•‡∏∞ Main Phase ‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <map>
#include <optional>
#include <limits>  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö std::numeric_limits
#include <iomanip> // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö std::setw, std::left, std::setfill
#ifdef _WIN32
#include <windows.h>
#else
#include <cstdlib>
#endif
#include "Card.h"
#include "Deck.h"
#include "Player.h"
#include "json.hpp"

using json = nlohmann::json;

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Output Formatting ---
void ClearScreen()
{
#ifdef _WIN32
  HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
  CONSOLE_SCREEN_BUFFER_INFO csbi;
  DWORD count;
  DWORD cellCount;
  COORD homeCoords = {0, 0};
  if (hStdOut == INVALID_HANDLE_VALUE)
    return;
  if (!GetConsoleScreenBufferInfo(hStdOut, &csbi))
    return;
  cellCount = csbi.dwSize.X * csbi.dwSize.Y;
  if (!FillConsoleOutputCharacter(hStdOut, (TCHAR)' ', cellCount, homeCoords, &count))
    return;
  if (!FillConsoleOutputAttribute(hStdOut, csbi.wAttributes, cellCount, homeCoords, &count))
    return;
  SetConsoleCursorPosition(hStdOut, homeCoords);
#else
  std::system("clear");
#endif
}

void printLine(char c = '-', int length = 70)
{
  std::cout << std::string(length, c) << std::endl;
}

void printSectionHeader(const std::string &title, char border_char = '=', bool add_newline_before = true)
{
  if (add_newline_before)
    std::cout << std::endl;
  printLine(border_char);
  int title_len = 0;
  for (char ch : title)
  {
    title_len++;
  }
  int padding = (70 - title_len) / 2;
  if (padding < 0)
    padding = 0;
  std::cout << std::string(padding, ' ') << title << std::endl;
  printLine(border_char);
}

void printBoxedMessage(const std::string &message, char border_char = '*')
{
  std::cout << std::endl;
  std::string border_line(message.length() + 4, border_char);
  std::cout << border_line << std::endl;
  std::cout << border_char << " " << message << " " << border_char << std::endl;
  std::cout << border_line << std::endl;
}

void printError(const std::string &error_message)
{
  std::cout << "\n*** üõë ERROR: " << error_message << " üõë ***" << std::endl;
}

void printWarning(const std::string &warning_message)
{
  std::cout << "\n--- ‚ö†Ô∏è Warning: " << warning_message << " ---" << std::endl;
}

std::string getPlayerNameInput(const std::string &prompt)
{
  std::string name;
  while (true)
  {
    std::cout << prompt;
    std::getline(std::cin, name);
    if (!name.empty())
    {
      return name;
    }
    printError("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ");
  }
}

std::vector<Card> loadCardsFromJson(const std::string &filename)
{
  std::vector<Card> all_cards;
  std::ifstream file_stream(filename);
  if (!file_stream.is_open())
  {
    printError("‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå JSON '" + filename + "' ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
    return all_cards;
  }
  json card_data_json;
  try
  {
    file_stream >> card_data_json;
  }
  catch (json::parse_error &e)
  {
    printError("Parse JSON ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + std::string(e.what()));
    file_stream.close();
    return all_cards;
  }
  file_stream.close();
  if (!card_data_json.is_array())
  {
    printError("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Array");
    return all_cards;
  }
  for (const auto &obj : card_data_json)
  {
    try
    {
      all_cards.emplace_back(obj.value("code_name", "N/A"), obj.value("name", "Unknown"), obj.value("grade", -1),
                             obj.value("power", 0), obj.value("shield", 0), obj.value("skill_description", ""),
                             obj.value("type_role", "Unknown"));
    }
    catch (json::type_error &e)
    {
      printWarning("Type error ‡∏Ç‡∏ì‡∏∞‡∏≠‡πà‡∏≤‡∏ô JSON object: " + std::string(e.what()));
    }
  }
  return all_cards;
}

int getIntegerInput(const std::string &prompt, Player *player_for_display, int min_val = -1000000, int max_val = 1000000)
{
  int choice = -1;
  std::string input_str;
  while (true)
  {
    // ClearScreen(); // ‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° action ‡πÉ‡∏´‡∏ç‡πà
    if (player_for_display)
    {
      player_for_display->displayField();
    }
    std::cout << prompt;
    std::cin >> input_str;
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    if (player_for_display)
    {
      if (input_str == "h" || input_str == "H")
      {
        ClearScreen();
        player_for_display->displayField();
        player_for_display->displayHand(true);
        continue;
      }
    }

    try
    {
      choice = std::stoi(input_str);
      if (choice >= min_val && choice <= max_val)
      {
        return choice;
      }
      else
      {
        printError("INPUT ERROR: ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (" + std::to_string(min_val) + " ‡∏ñ‡∏∂‡∏á " + std::to_string(max_val) + ")");
      }
    }
    catch (const std::invalid_argument &ia)
    {
      printError("INPUT ERROR: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (h)");
    }
    catch (const std::out_of_range &oor)
    {
      printError("INPUT ERROR: ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ");
    }
  }
}

char getActionInput(const std::string &prompt, Player *player_for_display)
{
  char choice_char = ' ';
  std::string input_line;
  while (true)
  {
    // ClearScreen(); // ‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏° y/n
    if (player_for_display)
    {
      player_for_display->displayField();
    }
    std::cout << prompt;
    std::getline(std::cin, input_line);

    if (input_line.length() == 1)
    {
      choice_char = std::tolower(input_line[0]);
      if (choice_char == 'y' || choice_char == 'n')
      {
        return choice_char;
      }
      else if (player_for_display && (choice_char == 'h'))
      {
        ClearScreen();
        player_for_display->displayField();
        player_for_display->displayHand(true);
        continue;
      }
    }
    printError("INPUT ERROR: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö 'y', 'n', ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (h)");
  }
}

int main()
{
  ClearScreen();
  printSectionHeader("üÉè FIBO CARD COMMANDOS - GAME START üÉè", '#', false);

  char startGameChoice = getActionInput("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ", nullptr);
  if (startGameChoice == 'n')
  {
    std::cout << "‡πÑ‡∏ß‡πâ‡∏û‡∏ö‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏´‡∏ô‡πâ‡∏≤! üëã" << std::endl;
    return 0;
  }
  ClearScreen();

  std::vector<Card> full_card_list = loadCardsFromJson("cards.json");
  if (full_card_list.empty())
  {
    printError("CRITICAL ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
    return 1;
  }

  std::string p1_name = getPlayerNameInput("üë§ ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1: ");
  ClearScreen();
  std::string p2_name = getPlayerNameInput("üë§ ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 2: ");
  ClearScreen();

  std::map<std::string, int> deck_recipe_v1_3 = {
      {"G0-01", 1}, {"G0-02", 4}, {"G0-03", 4}, {"G0-04", 8}, {"G1-01", 3}, {"G1-02", 4}, {"G1-03", 3}, {"G1-04", 2}, {"G1-05", 1}, {"G2-01", 3}, {"G2-02", 3}, {"G2-03", 3}, {"G2-04", 2}, {"G3-01", 2}, {"G3-02", 2}, {"G3-03", 2}, {"G3-04", 2}, {"G4-01", 1}};

  Player player1(p1_name, Deck(full_card_list, deck_recipe_v1_3));
  Player player2(p2_name, Deck(full_card_list, deck_recipe_v1_3));

  player1.setupGame("G0-01");
  player2.setupGame("G0-01");

  Player *currentPlayer = nullptr;
  Player *opponentPlayer = nullptr;

  // printSectionHeader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô", '~'); // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡πâ‡∏ß
  int first_player_choice = getIntegerInput("‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô? (1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö " + p1_name + ", 2 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö " + p2_name + "): ", nullptr, 1, 2);
  if (first_player_choice == 1)
  {
    currentPlayer = &player1;
    opponentPlayer = &player2;
  }
  else
  {
    currentPlayer = &player2;
    opponentPlayer = &player1;
  }
  ClearScreen();
  printBoxedMessage(currentPlayer->getName() + " ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô! ‚ú®", '+');
  std::cout << "(‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...)" << std::endl;
  std::cin.get();

  int turn_count = 0;
  bool game_over = false;

  while (!game_over && turn_count < 20)
  {
    turn_count++;
    ClearScreen();
    printSectionHeader("‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ó‡∏µ‡πà " + std::to_string(turn_count) + " ‡∏Ç‡∏≠‡∏á " + currentPlayer->getName() + " ‚öîÔ∏è", '*');

    // 1. Stand Phase
    currentPlayer->performStandPhase();
    std::cout << "‚úîÔ∏è ‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î Stand ‡πÅ‡∏•‡πâ‡∏ß" << std::endl;

    // 2. Draw Phase
    if (!currentPlayer->performDrawPhase())
    {
      ClearScreen();
      printBoxedMessage("GAME OVER: " + currentPlayer->getName() + " ‡πÅ‡∏û‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏±‡πà‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ! üíÄ", '!');
      game_over = true;
      break;
    }
    std::cout << "‚úîÔ∏è " << currentPlayer->getName() << " ‡∏à‡∏±‡πà‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î 1 ‡πÉ‡∏ö (‡∏°‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " << currentPlayer->getHandSize() << " ‡πÉ‡∏ö)" << std::endl;
    currentPlayer->displayHand(true);

    // 3. Ride Phase
    printSectionHeader(currentPlayer->getName() + ": RIDE PHASE üèçÔ∏è", '-');
    bool ride_successful_this_turn = false;
    while (!ride_successful_this_turn)
    {
      char ride_choice_char = getActionInput("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Ride ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ", currentPlayer);
      if (ride_choice_char == 'n')
      {
        std::cout << "‡∏Ç‡πâ‡∏≤‡∏° Ride Phase" << std::endl;
        break;
      }

      if (currentPlayer->getHandSize() == 0)
      {
        std::cout << "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡πâ Ride" << std::endl;
        break;
      }

      currentPlayer->displayHand(true);
      int card_idx_ride = getIntegerInput("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠ Ride (-1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å/‡∏Ç‡πâ‡∏≤‡∏°): ", currentPlayer, -1, currentPlayer->getHandSize() - 1);
      if (card_idx_ride == -1)
      {
        std::cout << "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£ Ride ‡πÉ‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ô‡∏µ‡πâ" << std::endl;
        break;
      }

      if (currentPlayer->rideFromHand(static_cast<size_t>(card_idx_ride)))
      {
        ClearScreen();
        printBoxedMessage("Ride ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üöÄ", '+');
        ride_successful_this_turn = true;
      }
      else
      {
        printError("RIDE FAILED: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Ride ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ");
        std::cout << "(‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å...)" << std::endl;
        std::cin.get();
      }
    }

    // 4. Main Phase (Call Units)
    printSectionHeader(currentPlayer->getName() + ": MAIN PHASE (Call Units) üÉè", '-');
    while (true)
    {
      if (currentPlayer->getHandSize() == 0)
      {
        std::cout << "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡πâ Call ‡πÅ‡∏•‡πâ‡∏ß" << std::endl;
        break;
      }

      char call_choice_char = getActionInput("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Call ‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ", currentPlayer);
      if (call_choice_char == 'n')
      {
        std::cout << "‡∏à‡∏ö‡∏Å‡∏≤‡∏£ Call ‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡πÉ‡∏ô Main Phase ‡∏ô‡∏µ‡πâ" << std::endl;
        break;
      }

      currentPlayer->displayHand(true);
      int card_idx_call = getIntegerInput("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠ Call (-1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ): ", currentPlayer, -1, currentPlayer->getHandSize() - 1);
      if (card_idx_call == -1)
      {
        std::cout << "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£ Call ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ" << std::endl;
        continue;
      }

      std::cout << "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á RC (0:FL, 1:FR, 2:BL, 3:BC, 4:BR): ";
      int rc_idx_call = getIntegerInput("‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ä‡πà‡∏≠‡∏á RC: ", currentPlayer, 0, NUM_REAR_GUARD_CIRCLES - 1);

      if (currentPlayer->callToRearGuard(static_cast<size_t>(card_idx_call), static_cast<size_t>(rc_idx_call)))
      {
        ClearScreen();
        printBoxedMessage("Call ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‚ú®", '+');
      }
      else
      {
        printError("CALL FAILED: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Call ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ");
        std::cout << "(‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...)" << std::endl;
        std::cin.get();
      }
    }

    // 5. Battle Phase
    printSectionHeader(currentPlayer->getName() + ": BATTLE PHASE üí•", '-');
    currentPlayer->clearGuardianZoneAndMoveToDrop();  // ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ò‡∏≠‡∏î
    opponentPlayer->clearGuardianZoneAndMoveToDrop(); // ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ò‡∏≠‡∏î

    char attack_again_choice = 'y';
    while (attack_again_choice == 'y')
    {
      ClearScreen();
      currentPlayer->displayField(); // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÇ‡∏à‡∏°‡∏ï‡∏µ

      std::vector<std::pair<int, std::string>> attackers_options = currentPlayer->chooseAttacker();
      int attacker_status_idx = -1;

      if (!attackers_options.empty())
      {
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å displayField ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô getIntegerInput ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏õ
        int choice_idx = getIntegerInput("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏à‡∏°‡∏ï‡∏µ (-1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°): ", nullptr, -1, attackers_options.size() - 1);
        if (choice_idx != -1)
        {
          attacker_status_idx = attackers_options[static_cast<size_t>(choice_idx)].first;
        }
      }
      else
      {
        // chooseAttacker() ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
      }

      if (attacker_status_idx == -1)
      {
        std::cout << "‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÇ‡∏à‡∏°‡∏ï‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ" << std::endl;
        break;
      }

      std::optional<Card> attacker_card_opt = currentPlayer->getUnitAtStatusIndex(attacker_status_idx);
      if (!attacker_card_opt.has_value())
      {
        printError("CRITICAL ERROR: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î Attacker ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å");
        break;
      }
      ClearScreen();
      currentPlayer->displayField();
      printBoxedMessage("‚öîÔ∏è " + currentPlayer->getName() + " ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å " + attacker_card_opt.value().getName() + " ‡πÄ‡∏õ‡πá‡∏ô Attacker. ‚öîÔ∏è", '!');

      int potential_booster_idx = currentPlayer->chooseBooster(attacker_status_idx);
      int booster_status_idx = -1;

      if (potential_booster_idx != -1)
      {
        char boost_confirm_choice = getActionInput("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Boost ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ", currentPlayer); // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á currentPlayer
        if (boost_confirm_choice == 'y')
        {
          booster_status_idx = potential_booster_idx;
          std::optional<Card> booster_card_opt = currentPlayer->getUnitAtStatusIndex(booster_status_idx);
          if (booster_card_opt.has_value())
          {
            std::cout << "üõ°Ô∏è " << currentPlayer->getName() << " ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å " << booster_card_opt.value().getName() << " ‡πÄ‡∏õ‡πá‡∏ô Booster." << std::endl;
          }
        }
      }

      int current_attacker_power = currentPlayer->getUnitPowerAtStatusIndex(attacker_status_idx, booster_status_idx);
      std::cout << "üî• ‡∏û‡∏•‡∏±‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏Ç‡∏≠‡∏á " << attacker_card_opt.value().getName() << " (‡∏£‡∏ß‡∏° Booster ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ): " << current_attacker_power << std::endl;

      // --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ (Targeting Opponent's VC for now) ---
      std::cout << "\n--- " << opponentPlayer->getName() << " ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ---" << std::endl;
      opponentPlayer->displayField(); // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°

      // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÇ‡∏à‡∏°‡∏ï‡∏µ VC ‡∏Ç‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏™‡∏°‡∏≠‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ
      int target_unit_status_idx = UNIT_STATUS_VC_IDX; // ‡πÇ‡∏à‡∏°‡∏ï‡∏µ VC ‡∏Ç‡∏≠‡∏á opponent
      std::optional<Card> target_card_opt = opponentPlayer->getUnitAtStatusIndex(target_unit_status_idx);
      int opponent_target_base_power = 0;
      if (target_card_opt.has_value())
      {
        opponent_target_base_power = opponentPlayer->getUnitPowerAtStatusIndex(target_unit_status_idx, -1, true); // true for defense
        std::cout << "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠ " << target_card_opt.value().getName() << " (Power: " << opponent_target_base_power << ")" << std::endl;
      }
      else
      {
        printError("‡πÑ‡∏°‡πà‡∏û‡∏ö Vanguard ‡∏Ç‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°!"); // ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
        break;
      }

      // --- (c) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á Guard ---
      int total_shield_from_guard = opponentPlayer->performGuardStep(current_attacker_power, target_card_opt); // ‡∏™‡πà‡∏á target ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      int opponent_total_defense_power = opponent_target_base_power + total_shield_from_guard;
      std::cout << "üõ°Ô∏è ‡∏û‡∏•‡∏±‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á " << opponentPlayer->getName() << " (‡∏£‡∏ß‡∏° Guard): " << opponent_total_defense_power << std::endl;

      // --- (e) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Hit/Miss ---
      bool is_hit = false;
      if (current_attacker_power >= opponent_total_defense_power)
      {
        printBoxedMessage("‚öîÔ∏èüí• ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ HIT! üí•‚öîÔ∏è", '!');
        is_hit = true;
      }
      else
      {
        printBoxedMessage("üõ°Ô∏è ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ MISS! (‡∏ñ‡∏π‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ) üõ°Ô∏è", '-');
      }

      opponentPlayer->clearGuardianZoneAndMoveToDrop(); // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà Guard ‡∏à‡∏∞‡πÑ‡∏õ Drop Zone

      // --- (f) ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö Damage Check (‡∏ñ‡πâ‡∏≤ Hit) ---
      if (is_hit)
      {
        int critical_to_deal = 1; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ Critical = 1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Attacker)
        // TODO: ‡∏î‡∏∂‡∏á Critical ‡∏à‡∏≤‡∏Å attacker_card_opt.value().getCritical() (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Card)
        // ‡πÅ‡∏•‡∏∞‡∏ö‡∏ß‡∏Å Critical ‡∏à‡∏≤‡∏Å Trigger effects ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

        printSectionHeader(opponentPlayer->getName() + " ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Damage Check " + std::to_string(critical_to_deal) + " ‡∏Ñ‡∏£‡∏±‡πâ‡∏á", '~');
        for (int i = 0; i < critical_to_deal; ++i)
        {
          if (opponentPlayer->getDeck().isEmpty())
          {
            printBoxedMessage("GAME OVER: " + opponentPlayer->getName() + " ‡πÅ‡∏û‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ Damage Check ‡πÑ‡∏î‡πâ (‡πÄ‡∏î‡πá‡∏Ñ‡∏´‡∏°‡∏î)! üíÄ", '!');
            game_over = true;
            break;
          }
          std::optional<Card> damage_card_opt = opponentPlayer->getDeck().draw();
          if (damage_card_opt.has_value())
          {
            opponentPlayer->takeDamage(damage_card_opt.value());
            // (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥ Trigger ‡∏à‡∏≤‡∏Å Damage Check)
            if (opponentPlayer->getDamageCount() >= 6)
            {
              game_over = true; // Player::takeDamage ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏û‡πâ
              break;
            }
          }
        }
        if (game_over)
          break; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏ö
      }

      currentPlayer->restUnit(attacker_status_idx);
      if (booster_status_idx != -1)
      {
        currentPlayer->restUnit(booster_status_idx);
      }
      std::cout << attacker_card_opt.value().getName() << " ‡πÅ‡∏•‡∏∞ Booster (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Rest." << std::endl;

      if (game_over)
        break; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏ö

      attack_again_choice = getActionInput("\n‡∏Ñ‡∏∏‡∏ì (" + currentPlayer->getName() + ") ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ", currentPlayer);
    }
    std::cout << "‡∏à‡∏ö Battle Phase ‡∏Ç‡∏≠‡∏á " << currentPlayer->getName() << std::endl;

    printSectionHeader(currentPlayer->getName() + ": END PHASE üåô", '-');
    currentPlayer->clearGuardianZoneAndMoveToDrop();  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Guardian Zone ‡∏Ç‡∏≠‡∏á CurrentPlayer ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Intercept ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
    opponentPlayer->clearGuardianZoneAndMoveToDrop(); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
    std::cout << "(Placeholder: ‡∏™‡∏Å‡∏¥‡∏•‡∏à‡∏ö‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô, ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)" << std::endl;

    ClearScreen();
    printSectionHeader("‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏Ç‡∏≠‡∏á " + currentPlayer->getName() + " ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", '*');
    std::cout << "(‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô...)" << std::endl;
    std::cin.get();

    if (currentPlayer->getDamageCount() >= 6)
    {
      // Player::takeDamage ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏û‡πâ‡πÅ‡∏•‡πâ‡∏ß
      game_over = true;
    }
    if (opponentPlayer->getDamageCount() >= 6 && !game_over)
    {
      // Player::takeDamage ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏û‡πâ‡πÅ‡∏•‡πâ‡∏ß
      game_over = true;
    }

    if (game_over)
      break;

    if (currentPlayer == &player1)
    {
      currentPlayer = &player2;
      opponentPlayer = &player1;
    }
    else
    {
      currentPlayer = &player1;
      opponentPlayer = &player2;
    }
  }

  ClearScreen();
  printSectionHeader("üèÅ GAME END üèÅ", '#');
  if (game_over)
  {
    if (player1.getDamageCount() >= 6 && player2.getDamageCount() < 6)
      printBoxedMessage(player2.getName() + " ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞! üéâ", '+');
    else if (player2.getDamageCount() >= 6 && player1.getDamageCount() < 6)
      printBoxedMessage(player1.getName() + " ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞! üéâ", '+');
    else
      printBoxedMessage("‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡∏•‡∏á! (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏™‡∏°‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏∑‡πà‡∏ô‡πÜ)", '*'); // ‡∏Å‡∏£‡∏ì‡∏µ Deck out ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏∑‡πà‡∏ô
  }
  else
  {
    std::cout << "‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á " << turn_count << " ‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô" << std::endl;
  }
  return 0;
}
